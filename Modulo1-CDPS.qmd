---
title: "Ci√™ncia de Dados para Pesquisadores da Sa√∫de"
subtitle: |
  M√≥dulo 1: Ferramentas, linguagens e possibilidades<br><br><br>  
  *Projeto Sa√∫de Data Science*
format: 
    revealjs:
      slide-number: true
      slide-level: 3
      logo: logoUFR.png
      incremental: true
      scrollable: true
      theme: simple
      code-fold: false
      self-contained: true
      number-sections: false
      css: estilo_modulo1_slides.css
editor: visual
---

# 1. Sobre o Curso

------------------------------------------------------------------------

## üéØ Objetivo

<br><br> Introduzir estudantes de inicia√ß√£o cient√≠fica, p√≥s-gradua√ß√£o e pesquisadores ao uso da ci√™ncia de dados na pesquisa em sa√∫de.

## M√≥dulos

-   M√≥dulo 1: Ferramentas, linguagens e possibilidades (12h)\
-   M√≥dulo 2: Manipula√ß√£o de dados, visualiza√ß√£o e bioestat√≠stica com o R (12h) (Set)
-   M√≥dulo 3: Machine learning na sa√∫de (12h)¬†(Nov)
-   M√≥dulo 4: Projeto de aplica√ß√£o (4h)\

### üíª Conte√∫do Program√°tico do M√≥dulo 1

1.  Introdu√ß√£o √† Ci√™ncia de Dados (Teoria)

2.  Introdu√ß√£o ao uso do R <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/r/r-original.svg" alt="R" width="30"/> e RStudio <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/rstudio/rstudio-original.svg" alt="RStudio" width="30"/> (Pr√°tica)

3.  Fundamentos da linguagem R (Teoria)

4.  Controle de vers√µes Git/GitHub <img src="https://cdn.jsdelivr.net/npm/simple-icons@v5/icons/github.svg" alt="GitHub" width="30"/> (Pr√°tica)

5.  Cria√ß√£o de apresenta√ß√µes, relat√≥rios, web-sites, artigos, teses, dashboards e aplicativos web (Pr√°tica)

# Projeto Sa√∫de Data Science

## Objetivo

<br>

Criar oportunidades de intera√ß√£o dial√≥gica com a sociedade por meio da elabora√ß√£o de produtos de dados associados √† ci√™ncia de dados.

------------------------------------------------------------------------

Equipe do Projeto *Sa√∫de Data Science*\
Projeto de Extens√£o UFR N¬∫ 696/2025

<img src="EquipeSDS.png" alt="Equipe Sa√∫de Data Science" class="img-centro"/>

# 2. Introdu√ß√£o

------------------------------------------------------------------------

## O que √© ci√™ncia de dados (*Data Science*)

<br>

::: {style="text-align: justify;"}
<p>Campo acad√™mico interdisciplinar que utiliza estat√≠stica, computa√ß√£o cient√≠fica, m√©todos cient√≠ficos, processos, algoritmos e sistemas para extrair ou extrapolar conhecimento e <em>insights</em> de **dados ruidosos**, **estruturados** e **n√£o estruturados** (Dhar, 2013).</p>
:::

------------------------------------------------------------------------

::: panel-tabset
#### üìä Estruturados

```{r}
knitr::include_graphics("dados_sinan.png")
```

#### üßæ N. Estruturados

```{r}
knitr::include_graphics("dados_ficha_notifica√ß√£o.png")
```

#### üìâ Ruidosos

```{r}
knitr::include_graphics("dados_ruidosos.png")
```
:::

------------------------------------------------------------------------

A ci√™ncia de dados est√° relacionada com

-   **Big Data**\
-   **Minera√ß√£o de Dados (*Data Mining*)**\
-   **Aprendizagem de M√°quina (*Machine Learning*)**

## Minera√ß√£o de Dados <br> (*Data Mining*)

<br>

::: {style="text-align: justify; font-style: italic; border-left: 4px solid #ccc; padding-left: 3em; margin-top: 1em;"}
‚Äú√â o processo de extrair e descobrir padr√µes em grandes bancos de dados envolvendo m√©todos relacionados √† aprendizagem de m√°quina, estat√≠stica e sistemas de bancos de dados.‚Äù Wikipedia

<br>

√â o processo de descobrir automaticamente informa√ß√£o √∫til em grandes reposit√≥rios de dados (Tan et al., 2005)
:::

## Hist√≥rico do *Data Mining* {.smaller}

-   **D√©cada de 1960-70**: Surgimento dos primeiros bancos de dados e linguagens de consulta (ex: SQL).
-   **D√©cada de 1980**: Avan√ßos em armazenamento e recupera√ß√£o de dados; algoritmos de aprendizado simb√≥lico.
-   **D√©cada de 1990**: Populariza√ß√£o do termo *data mining*; surgimento de ferramentas comerciais (ex: IBM Intelligent Miner, SAS Enterprise Miner).
-   **2000s**: Integra√ß√£o com *big data*, algoritmos escal√°veis, minera√ß√£o de dados em tempo real.
-   **2010s em diante**: Consolida√ß√£o como parte da ci√™ncia de dados; uso intensivo de aprendizado de m√°quina e redes neurais.

## Aprendizagem de M√°quina <br> (*Machine Learning*)

-   Consiste em desenvolver algoritmos que permitem os computadores aprenderem dos dados e tomarem decis√µes baseadas em dados\

-   Surgiu na d√©cada de 1950\

-   

    > **Arthur Samuel (1959)** definiu *machine learning* como:\
    > "o campo de estudo que d√° aos computadores a habilidade de aprender sem serem explicitamente programados."

------------------------------------------------------------------------

| Aspecto | Minera√ß√£o de Dados | Aprendizagem de M√°quina |
|------------------|---------------------------|---------------------------|
| **Objetivo principal** | Extrair padr√µes √∫teis e conhecimento de dados | Fazer previs√µes ou tomar decis√µes com base em dados |
| **Enfoque** | Explora√ß√£o e descoberta de padr√µes em grandes conjuntos de dados | Generaliza√ß√£o para novos dados a partir de exemplos passados |
| **Tarefa t√≠pica** | Agrupamento, associa√ß√£o, descoberta de regras | Classifica√ß√£o, regress√£o, clustering supervisionado |
| **Motiva√ß√£o original** | An√°lise de grandes volumes de dados corporativos | Constru√ß√£o de algoritmos que aprendem automaticamente |
| **Uso comum em** | Neg√≥cios, marketing, banco de dados | Intelig√™ncia artificial, rob√≥tica, sistemas aut√¥nomos |
| **Base t√©cnica** | Estat√≠stica + banco de dados + ML | Estat√≠stica + algoritmos + computa√ß√£o |

## Por que Ci√™ncia de Dados na Pesquisa em Sa√∫de?

------------------------------------------------------------------------

## O processo da Ci√™ncia de Dados √© muito semelhante ao da pesquisa quantitativa

------------------------------------------------------------------------

::: {style="text-align: justify;"}
> As mudan√ßas tecnol√≥gicas que iniciaram na d√©cada de 50, e se intensificaram em 1990 e em 2020, mudaram o material emp√≠rico e o fazer cient√≠fico.
:::

------------------------------------------------------------------------

![](artigos.png){fig-align="center"}

------------------------------------------------------------------------

### Uso da ci√™ncia de dados na pesquisa em sa√∫de

<br><br>

| Termos de busca (google scholar) | Resultados |
|----------------------------------|------------|
| "machine learning" e "health"    | 4.800.000  |
| "data mining" e "health"         | 5.440.000  |
| "data science" e "health"        | 7.270.000  |

------------------------------------------------------------------------

-   Em geral, o uso da ci√™ncia de dados na pesquisa:
    -   amplia o alcance
    -   aumenta o rigor
    -   eleva o impacto real

## Ci√™ncia de Dados na Pesquisa: repensar o fazer cient√≠fico

------------------------------------------------------------------------

1.  Implica√ß√µes da era do Big Data
2.  Implica√ß√µes dos desenvolvimentos em ML, DM e IA
3.  Implica√ß√µes do uso de linguagem de programa√ß√£o
4.  Efeitos potenciais na pesquisa universit√°ria

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Ci√™ncia de Dados na Pesquisa: repensar o fazer cient√≠fico
:::

------------------------------------------------------------------------

### Big Data e a revolu√ß√£o dos dados {.smaller}

-   Dados administrativos se tornaram dados secund√°rios de pesquisa
    -   Ex: Registros eletr√¥nicos do **e-SUS**, **SIH/SUS**, **SINAN** e **SIVEP**
-   Dados n√£o usuais tornaram-se mais acess√≠veis
    -   Ex: prescri√ß√µes m√©dicas, √°udios de consultas, imagens de exames, etc.
-   Dispositivos e sistemas passaram a gerar outros dados
    -   Ex: Dados oriundos de dispositivos vest√≠veis (wearables) e apps de sa√∫de

------------------------------------------------------------------------

### Machine Learning, Data Mining e Intelig√™ncia Artificial {.smaller}

-   Novas e melhores ferramentas de an√°lise
    -   An√°lise de dados n√£o estruturados
        -   Ex: textos, imagens, v√≠deos
    -   Minera√ß√£o
    -   Predi√ß√£o
        -   Ex: Predi√ß√£o da mortalidade hospitalar
    -   Classifica√ß√£o
        -   Ex: Algoritmo de classifica√ß√£o baseado em deep learning para detectar retinopatia diab√©tica
    -   Agrupamento
        -   Ex: Identificar subgrupos de pacientes com insufici√™ncia card√≠aca congestiva com base em caracter√≠sticas cl√≠nicas, visando apoiar tratamentos personalizados

------------------------------------------------------------------------

### Uso de uma linguagem de programa√ß√£o {.smaller}

-   Aumenta a **reprodutibilidade** e **transpar√™ncia** (exemplo: github)
-   Melhora a **comunica√ß√£o dos resultados** (exemplo: preliminar e desenho)
-   Melhora o di√°logo entre grupos de pesquisa (exemplo: [aplicativo web](https://djalmabarbosa.shinyapps.io/TematicoApp/))
-   Melhora o fluxo de orienta√ß√£o/mentoria
-   Fortalece a **ci√™ncia aberta** e a **confian√ßa p√∫blica**
-   Viabiliza forma√ß√£o interdisciplinar
-   Permite intera√ß√£o mais natural com ferramentas de IA (exemplo: chatgpt)

## Uso da IA como assistente de pesquisa {.smaller}

------------------------------------------------------------------------

-   Acelera√ß√£o da codifica√ß√£o
    -   Gera√ß√£o r√°pida de fun√ß√µes e scripts com base em linguagem natural
    -   Sugest√µes otimizadas de c√≥digo para evitar erros
-   Melhora na organiza√ß√£o do fluxo de an√°lise de dados
    -   Visualiza√ß√µes explorat√≥rias automatizadas
    -   Cria√ß√£o de pipelines de pr√©-processamento

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Uso da IA como assistente de pesquisa
:::

------------------------------------------------------------------------

-   Auxilia na documenta√ß√£o e reprodutibilidade
    -   Coment√°rios autom√°ticos e claros no c√≥digo
    -   Templates para RMarkdown, Quarto, Jupyter etc.
-   Aux√≠lio em an√°lises estat√≠sticas e modelagem
    -   Sugest√µes e explica√ß√µes de testes estat√≠sticos
    -   Compara√ß√£o de modelos
    -   Auxilia na constru√ß√£o de simula√ß√µes
    -   Ajuda a encontrar erros no c√≥digo (debug)

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Uso da IA como assistente de pesquisa
:::

------------------------------------------------------------------------

-   Auxilia na divulga√ß√£o dos resultados
    -   Templates para formata√ß√£o de monografias, disserta√ß√µes e teses
    -   Elobora√ß√£o de produtos de dados
-   Pode acelerar o aprendizado
    -   Explica√ß√µes sob demanda de sintaxe e conceitos estat√≠sticos
    -   Refer√™ncia a pacotes, fun√ß√µes e boas pr√°ticas
    -   Respostas a perguntas avan√ßadas de modelagem e dados

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Uso da IA como assistente de pesquisa
:::

## Fortalecimento da rela√ß√£o entre Pesquisa, Extens√£o e Inova√ß√£o

------------------------------------------------------------------------

-   Novas possibilidade de pesquisas com aplica√ß√µes pr√°ticas
-   An√°lise de dados em tempo real
-   Cria√ß√£o de produtos tecnol√≥gicos (produtos de dados)
-   Maior protagonismo do estudante
-   Oportunidade de forma√ß√£o interprofissional
-   Maior empregabilidade

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Fortalecimento da rela√ß√£o entre Pesquisa, Extens√£o e Inova√ß√£o
:::

## Por que a linguagem/software R

------------------------------------------------------------------------

-   O R √© uma linguagem de programa√ß√£o *funcional*

-   As fun√ß√µes s√£o armazenadas em pacotes

    -   Pacotes b√°sicos + pacotes instal√°veis
    -   Mais de 16.000 pacotes (2020)

-   O software e a linguagem *gratuitos*

-   Pode ser utilizado em diversos sistemas operacioanais

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Por que a linguagem/software R
:::

------------------------------------------------------------------------

-   Possui uma comunidade de colabora√ß√£o ativa

-   Possui um sistema de 'controle de qualidade'

-   √â a linguagem preferida dos estat√≠sticos

-   √â uma das linguagens de an√°lise estat√≠sticas mais utilizadas no mundo

-   Viabiliza o trabalho IA integrada

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Por que a linguagem/software R
:::

# 3. Usando o R!

------------------------------------------------------------------------

## Pr√°tica: Baixar e instalar o R

------------------------------------------------------------------------

<https://cran.r-project.org/bin/windows/base/>

------------------------------------------------------------------------

![](R_download.png)

------------------------------------------------------------------------

![](R_mirror.png)

------------------------------------------------------------------------

![](R_install.png)

------------------------------------------------------------------------

### Inserindo c√≥digo diretamente no console do R

------------------------------------------------------------------------

![Console do R](R_console.png)

### Pr√°tica: baixar e instar o RStudio

### ![RStudio](RStudio2.png)

### Como usar o RStudio

1.  Escrevendo no console
2.  Utilizando seus tipos de arquivo
    -   R Sript (simples e √∫til)
    -   RMarkdown
    -   Quarto\
3.  Utilizando projetos
4.  Integrando o GitHub
5.  Com um co-piloto (IA)

## Escrevendo no painel *console* do RStudio

------------------------------------------------------------------------

![Console do RStudio](RStudio_console.png)

## Utilizando *R scripts*

------------------------------------------------------------------------

-   Um *script* √© um texto em forma de comandos (c√≥digos), que o R interpreta como uma a√ß√£o a ser executada.
-   √â um roteiro de execu√ß√£o
-   Executa c√≥digo sequencialmente
-   √â o arquivo utilizado pelo R, quando n√£o se usa o RStudio

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Escrevendo um *R script*
:::

------------------------------------------------------------------------

[*Pr√°tica*]{.azul}

::: {.callout style="border-left: 4px solid #198754; background-color: #e6f4ea;"}
<br>

Clique em: *Menu* \> *File \> New File \> R Script*

Escreva no seu R Script: 2+2

Coloque o cursor do mouse na linha com o c√≥digo e clique em 'Run'.

Para salvar: *File \> Save*

<br>
:::

------------------------------------------------------------------------

Em geral os *scripts* possuem os seguintes elementos:

| Termo | Sin√¥nimos | Descri√ß√£o |
|------------------|----------------------|--------------------------------|
| Base de dados | *dataframe*, Banco de dados | Estrutura que armazena dados |
| Vari√°vel | *Column*, Coluna | Campo que armazena valores para an√°lise |
| Linha | *Row*, Observa√ß√£o, Registro | Cada entrada ou conjunto de valores |
| **Fun√ß√£o** | Verbo, Comando | A√ß√£o que o R executa |
| Argumento | Par√¢metro | Define op√ß√µes dentro de uma fun√ß√£o |
| Output | Resultado | Retorno gerado pelo c√≥digo |

------------------------------------------------------------------------

### Fun√ß√µes

------------------------------------------------------------------------

::: {.callout-note style="background-color:#dceeff;"}
-   O R √© uma linguagem funcional
-   Fun√ß√µes v√™m associadas a par√™nteses `( )`, onde colocamos os *argumentos da fun√ß√£o*.
-   Exemplos da matem√°tica:\
-   $y = f(x)$
-   $z = f(x, y)$ ... [Latex]{.verde}
-   A fun√ß√£o mais simples no R √© a cria√ß√£o de um conjunto de valores (*vetor*)
:::

------------------------------------------------------------------------

### [*Pr√°tica*]{.azul}

``` r
# Soma 2 com 2
2+2

# Cria o vetor x
x <- c(1,1,2,3,5,8) # define o objeto x

mean(x) # Calcula a media de x
```

------------------------------------------------------------------------

### Utilizando pacotes (*packages*) <br> [*Pr√°tica*]{.azul}

------------------------------------------------------------------------

-   Instalando com 'click' *Tools, Install Packages*.

-   Com comando:

    ``` r
    install.packages("tidyr")
    ```

-   Carregando o pacote instalado

    ``` r
    library(tidyr)
    ```

    -   Voc√™ sempre precisar√° recarregar os novos pacotes ap√≥s encerrar uma se√ß√£o

-   Verificando os pacotes instalados

    ``` r
    sessionInfo()
    ```

-   Atualizando pacotes

------------------------------------------------------------------------

#### Tidyverse

------------------------------------------------------------------------

::: panel-tabset
#### Filosofia

```{r Tidyverse}
knitr::include_graphics("tidyverse.png")
```

#### Pacotes do Tidyverse

```{r Pacotes do Tidyverse}
knitr::include_graphics("pacotes_tidyverse.png")
```
:::

------------------------------------------------------------------------

O *tidyverse* √© um metapacote que segue uma filosofia de design, gram√°tica e estruturas de dados em comum para que diversos pacotes √∫teis para a ci√™ncia de dados possam ser utilizados em cojunto

------------------------------------------------------------------------

#### [*Pr√°tica*]{.azul}

Vamos instalar e carregar os pacotes do *tidyverse*

``` r
if(!require(tidyverse)) install.packages("tidyverse") 

library(tidyverse)

# Agora podemos usar uma fun√ß√£o 'tible' que faz parte do tidyverse

y <- c(1,2,3,4,5,6)

tibble(x,y) # retorna o objeto no console

dados <- tibble(x,y)
```

------------------------------------------------------------------------

### Dicas de organiza√ß√£o do *script*

------------------------------------------------------------------------

### ‚ùå Bagun√ßado

``` r
library(dplyr)
dados=data.frame(nome=c("Ana","Bruno","Carlos","Daniela"),idade=c(23,35,31,28),salario=c(2500,4200,3900,3100))
dados_filtrados=dados%>%filter(salario>3000)
media_idade=mean(dados_filtrados$idade)
print(dados_filtrados)
```

### ‚úÖ Organizado

``` r
# Carrega pacotes necess√°rios
library(dplyr)

# Cria um dataframe de exemplo
dados <- data.frame(
  nome = c("Ana", "Bruno", "Carlos", "Daniela"),
  idade = c(23, 35, 31, 28),
  salario = c(2500, 4200, 3900, 3100)
)

# Filtra pessoas com sal√°rio acima de 3000
dados_filtrados <- dados %>%
  filter(salario > 3000)

# Calcula a m√©dia de idade das pessoas filtradas
media_idade <- mean(dados_filtrados$idade)

# Exibe os dados filtrados e a m√©dia de idade
print(dados_filtrados)
```

------------------------------------------------------------------------

::: {.callout-tip style="background-color:#e6ffe6;"}
``` r

# Verificando o diret√≥rio de trabalho
getwd()
```
:::

## Usando o R Markdown <br> [*Pr√°tica*]{.azul}

------------------------------------------------------------------------

::: {.callout-note style="background-color:#dceeff;"}
Crie um novo arquivo clicando em: **File \> New File \> R Markdown...**

Escolha um t√≠tulo, autor e selecione o formato desejado (HTML, PDF, Word).
:::

------------------------------------------------------------------------

-   R Markdown √© uma ferramenta que permite combinar **texto formatado** com **c√≥digo execut√°vel**.
-   √â um documento din√¢mico
-   Ideal para **relat√≥rios reprodut√≠veis**, **an√°lises**, **artigos cient√≠ficos** e **apresenta√ß√µes**.
-   Usa o formato `.Rmd`.
-   Para compilar, clique em `Knit`.

------------------------------------------------------------------------

## Estrutura b√°sica de um arquivo R Markdown

``` text
---
title: "Meu primeiro R Markdown"
author: "Seu Nome"
date: "`r Sys.Date()`"
output: html_document
---

## Introdu√ß√£o

Texto explicativo aqui.

C√≥digos nas chuncks
{r chunk do r}
```

------------------------------------------------------------------------

::: {.callout-tip style="background-color:#e6ffe6;"}
Atalho para criar uma nova chunk: Ctrl + Alt + i
:::

### Principais componentes de um R Markdown {.smaller}

| Elemento | Exemplo | Descri√ß√£o |
|-----------------------|-----------------------|---------------------------|
| **Texto** | Markdown | Escrita formatada (t√≠tulos, listas, negrito, etc.) |
| **C√≥digo R** | `{r plot(x)`} | C√≥digo que ser√° executado |
| **Chunks** | `{r nome}` | Blocos de c√≥digo identific√°veis |
| **YAML Header** | `--- ... ---` | Metadados sobre o documento |

------------------------------------------------------------------------

::: {.callout-tip style="background-color:#e6ffe6;"}
Use `echo = FALSE` para ocultar o c√≥digo e mostrar apenas o resultado:

\`\`\`{r echo=FALSE}

mean(c(1, 2, 3, 4, 5))

\`\`\`

Use `eval = FALSE` para evitar a execu√ß√£o do c√≥digo e mostr√°-lo como exemplo:

\`\`\`{r, echo=FALSE, eval=FALSE}

Voc√™ pode colocar textos, sem \# para coment√°rios:

Verificar outras fun√ß√µes para calcular a m√©dia...

Ou pode colocar c√≥digos de an√°lise, que voc√™ n√£o quer usar no momento...

\`\`\`
:::

------------------------------------------------------------------------

::: {.callout-tip style="background-color:#e6ffe6;"}
Use `message = FALSE, warning = FALSE` para esconder mensagens e avisos. <br><br>

Confira os 'Cheat Sheets' para ver o que √© poss√≠vel fazer!

<https://posit.co/resources/cheatsheets/> (Diversos!)

[üìÑ RMarkdown Cheatsheet (abrir PDF)](https://github.com/rstudio/cheatsheets/raw/main/rmarkdown.pdf){target="_blank"}
:::

## Usando o R Markdown <br> [*Pr√°tica*]{.azul}

::: {.callout-tip style="background-color:#e6ffe6;"}
Se o objetivo √© 'costurar' (criar) um arquivo html:

use 'espa√ßo + espa√ßo + 'enter'' ou <br> para quebrar linhas automaticamente

Se o arquivo de sa√≠da for .pdf, use \newline
:::

## Quarto vs R Markdown

------------------------------------------------------------------------

| Caracter√≠stica | R Markdown (.Rmd) | Quarto (.qmd) |
|------------------|------------------------|------------------------------|
| Engine | R (com suporte parcial a Python) | R, Python, Julia e Observable integrados |
| YAML | `output: html_document` | `format: html` |
| Execu√ß√£o de c√≥digo | Integrada via knitr | Integrada via Jupyter ou knitr |
| Formatos de sa√≠da | HTML, PDF, Word, slides | HTML, PDF, Word, Reveal.js, livros, sites |
| Flexibilidade de linguagem | Limitada | Multil√≠ngue e orientada a ci√™ncia de dados |
| Instala√ß√£o necess√°ria | R + RStudio | Pode usar com ou sem RStudio, CLI dispon√≠vel |
| Renderiza√ß√£o | `Knit` bot√£o no RStudio | `Render` bot√£o ou terminal com `quarto render` |
| Templates | Limitados, muitos voltados ao R | Amplo suporte a templates para blogs, sites, livros, etc. |
| Suporte para apresenta√ß√µes | Sim (com xaringan, ioslides, slidy, beamer) | Sim (nativamente com Reveal.js e Beamer) |
| Controle de layout | Limitado | Avan√ßado com markdown, divs e CSS |
| Comunidade e futuro | Est√°vel, por√©m sem grandes atualiza√ß√µes | Plataforma em crescimento e com maior integra√ß√£o |

------------------------------------------------------------------------

## Utilizando a ferramenta "Projetos"

-   Organiza seus diret√≥rios

-   Facilita a importa√ß√£o e exporta√ß√£o de bases de dados

-   Facilita o compartilhamento de c√≥digo

### [*Pr√°tica*]{.azul}

::: {.callout style="border-left: 4px solid #198754; background-color: #e6f4ea;"}
1.  No canto superior direito, clique em:

    -   **New Project**
    -   **New Directory**
    -   **New Project** novamente

2.  Escolha o nome que desejar para o projeto e o local onde ser√° salvo.

3.  Clique em **Create Project** ‚úÖ
:::

::: {.callout-tip style="background-color:#e6ffe6;"}
Geralmente n√£o compensa salvar o *workspace* quando fechamos o Rstudio.

Para desabilitar essa op√ß√£o, v√° em *Tools* \> *Global Options* e desmarque *Sabe workspace to* RData\* on exit:\* Never.
:::

## Utilizando o Git/GitHub

### Git

-   **Git** √© um sistema de **controle de vers√µes distribu√≠do** criado por Linus Torvalds em 2005
-   Permite o *versionamento do c√≥digo*
    -   Registro hist√≥rico de altera√ß√µes em arquivos de c√≥digo e projetos
    -   Facilita o trabalho colaborativo, a recupera√ß√£o de vers√µes anteriores e o rastreamento de quem fez o qu√™
-   Usado localmente no seu computador, e tamb√©m com servi√ßos como o GitHub

### GitHub

-   Plataforma de hospedagem de c√≥digo e projetos que usam Git
-   N√£o √© exclusivo da linguagem R
-   Facilita a **colabora√ß√£o**, **rastreamento de mudan√ßas** e **distribui√ß√£o de projetos**
-   Permite maior **transpar√™ncia cient√≠fica** e **reprodutibilidade**
-   Permite **publica√ß√£o de reposit√≥rios**: sites, documentos e dashboards

### Fluxo b√°sico de uso do GitHub üö¶

1.  Criar conta no [github.com](https://github.com)
2.  Criar novo reposit√≥rio
3.  Fazer *clone* no RStudio ou usar GitHub Desktop
4.  Trabalhar localmente: editar scripts, salvar, testar
5.  Realizar *commit* e *push* das altera√ß√µes

------------------------------------------------------------------------

::: callout-tip
Voc√™ tamb√©m pode:

1.  Clonar resosit√≥rios de outras pessoas (melhor para explorar, aprender...)
2.  Fazer um 'fork' (permite sugerir mudan√ßas)
:::

### Exemplo de estrutura de reposit√≥rio

``` text
projeto-chikungunya/
‚îú‚îÄ‚îÄ dados/
‚îÇ   ‚îî‚îÄ‚îÄ base_limpa.xlsx
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îî‚îÄ‚îÄ analise_chikungunya.R
‚îú‚îÄ‚îÄ output/
‚îÇ   ‚îî‚îÄ‚îÄ grafico_incidentes.png
‚îú‚îÄ‚îÄ README.md
‚îî‚îÄ‚îÄ LICENSE
```

::: notes
Crie um chunk de c√≥digo, e no chatgpt, escreva:\
\
"Abra o c√≥digo abaixo no canvas, para edi√ß√£o."
:::

## Utilizando IA como assistente de pesquisa

Dentre as formas de uso de IA dentro do RStudio, est√£o:

1.  Co-piloto (GitHub Co-pilot)\
2.  Como um chat-bot, dentro do RStudio (pacote *chattr*)
3.  Chat-bot externo (Microssoft Co-pilot, Chatgpt...)

## Buscando ajuda (help!) {.smaller}

Algumas das principais formas de buscar ajuda s√£o:

1.  O *Help* ou documenta√ß√£o do R

    ```{r, echo=TRUE, eval = F}

    help(sqrt)
    ```

2.  Google

3.  Foruns

    1.  *Stackoferflow* (<https://pt.stackoverflow.com>)

    2.  Posit Community (<https://forum.posit.co/>)

    3.  GitHub (<https://github.com/>)

4.  IA

    1.  Microssoft co-pilot

    2.  Chat GPT

    3.  Gemini

# 4. Fundamentos da linguagem R

------------------------------------------------------------------------

-   O R √© uma linguagem de programa√ß√£o din√¢mica
-   O R √© uma linguagem de programa√ß√£o funcional
-   N√£o √© uma linguagem orientada a objetos, mas permite integra√ß√£o
-   No R, tamb√©m cahmamos **objetos** as entidades que armazenam os dados
-   O R √© apenas uma linguagem. Quem faz os c√°lculos √© o computador.

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Fundamentos da linguagem R
:::

## Objetos

O R possui cinco classes b√°sicas (at√¥micas) de objetos:

1.  caracter
2.  num√©rico (n√∫meros reais)
3.  inteiro
4.  complexo
5.  l√≥gico (verdadeiro/falso)

## N√∫meros

-   No R, n√∫meros s√£o geralmente considerados como objetos num√©ricos (n√∫meros reais com maior precis√£o '*double*')
-   Se quisermos usar n√∫meros inteiros, podemos utilizar o sufxo L
    -   P.e: *x \<- c(2L,4L)*
-   Existe um n√∫mero especial *Inf*, para representar o infinito.
    -   P.e: *1/ Inf*; 0
-   *NaN* representa um valor indefinido ("*not a number*").
    -   P.e: *0/0*; NaN

## Atributos

Os objetos do R podem ter atributos

-   *names*, *dimnames*
-   *dimensions*, para matrizes ou arranjos
-   *class*
-   *length*
-   Outras, definidas pelo usu√°rio

[Podemos acessar os atributos de um objeto com a fun√ß√£o *attributes()*]{.fragment}

## Entrando com os insumos

> No *prompt* do R digitamos **express√µes**.

> O simbolo '\<-' √© o **operador de atribui√ß√£o**.

``` r
> x <- 1
```

<br>

> A **gram√°tica da linguagem** determina se uma express√£o est√° ou n√£o completa.

``` r
> x <-   ## express√£o incompleta

# indica coment√°rio. Tudo depois dele √© ignorado.
```

------------------------------------------------------------------------

Quando uma express√£o completa √© colocada no **prompt** ela √© avaliada, e o resultado da avalia√ß√£o √© retornado.

``` r
x # print autom√°tico
print(x) # print expl√≠cito

# [1] 5 indica que x √© um vetor, e que 5 √© o primeiro elemento.
```

<br>

::: callout-tip
Podemos utilizar o operador ':' para criar inteiros em sequ√™ncia.

```{r, echo=TRUE}
x <- 1:22
x
```
:::

## Vetores {.smaller}

-   O objeto mais b√°sico √© o **vetor**

-   Os objetos mais elaborados s√£o uma extens√£o de vetores

-   Um vetor cont√©m apenas objetos at√¥micos da mesma classe

-   A fun√ß√£o *c( )* pode ser utilizada para criar vetores de objetos

    ``` r
    x <- c(0.4, 0.9)                              # num√©rico
    x <- c(TRUE, FALSE)                           # l√≥gico
    x <- c(T, F)                                  # l√≥gico
    x <- c("Vacinado", "N√£o Vacinado", "D√∫vida")  # caractere
    x <- 3:25                                     # inteiro
    x <- c(2+0i, 1+4i)                            # complexo
    ```

------------------------------------------------------------------------

<br>

::: callout-tip
Utilize a fun√ß√£o *class( )* para varificar o tipo de objeto criado

```{r, echo=TRUE}
class(x)
```

Ou observe a classe no painel superior direito.
:::

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Vetores
:::

------------------------------------------------------------------------

### Misturando objetos

O que acontece quando fazemos:

``` r
y <- c(1.7, "a")  # caractere
y <- c(TRUE, 2)   # num√©rico
y <- c("a", TRUE) # caractere
```

![Regra de convers√£o. Fonte: Hands-on Programming with R, Grolemund (2015)](coercao_regra.png)

## Convers√£o expl√≠cita

``` r

x <- 0:6
class(x)
[1] "integer"

as.numeric(x)
[1] 0 1 2 3 4 5 6

as.logical(x)
[1] FALSE TRUE TRUE TRUE TRUE TRUE TRUE

> as.character(x)
[1] "0" "1" "2" "3" "4" "5" "6"
```

## Matrizes

-   Matrizes s√£o vetores, com o atributo *dimens√£o*

    -   O pr√≥prio atributo *dimens√£o* √© um vetor

-   S√£o constru√≠das a partir da coluna (primeira √† esquerda em diante)

    ```{r, echo=TRUE}
    m <- matrix(1:6, nrow = 2, ncol = 3) 
    m

    dim(m)

    attributes(m)
    ```

------------------------------------------------------------------------

::: callout-tip
As fun√ß√µes *cbind()* e *rbind()* s√£o muito comuns e podem ser utilizadas para criar matrizes:

```{r, echo=TRUE}
x <- 1:4
y <- 10:13

cbind(x,y)

rbind(x,y)
```
:::

## Listas

-   Listas s√£o um tipo especial de vetores
    -   podem conter elementos de diversas classes

        ```{r, echo=TRUE}
        x <- list(1, "a", TRUE, 1 + 4i) 
        x
        ```

------------------------------------------------------------------------

::: {.callout-note style="background-color:#dceeff;"}
Nomes

Os objetos do R tamb√©m podem ter *nomes* como atributo

-   Facilia a organiza√ß√£o o c√≥digo

-   Interessante para visualiza√ß√µes
:::

------------------------------------------------------------------------

[*Pr√°tica*]{.azul}

``` r
    x <- 1:3

    names(x)

    names(x) <- c("Hospital", "UBS", "S.Espec")

    x

    names(x)
```

------------------------------------------------------------------------

Podemos criar listas j√° com o atributo nome

```{r, echo=TRUE}
x <- list(Hosp = 1:4, UBS = 2, Espec = "Sim")
x
```

## Fatores

-   S√£o utilizados para representar dados categ√≥ricos
-   Podem ser ordenados ou n√£o
-   Podem ser vistos como vetores inteiros que possum um r√≥tulo (*label*)
-   S√£o tratados de forma especial em modelagem
-   A odem dos n√≠veis pode ser estabelecida com o argumento *levels* da fun√ß√£o *factor()*.
    -   Relevante para modelagem, pois o primeiro n√≠vel √© utilizado como *baseline*

------------------------------------------------------------------------

```{r, echo=TRUE}

x <- factor(c("sim", "sim", "n√£o", "sim", "n√£o"))
x

table(x)

x <- factor(c("sim", "sim", "n√£o", "sim", "n√£o"),
            levels = c("sim", "n√£o"))
```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Fatores
:::

## Tipos de Vari√°veis

::: {.callout-note style="background-color:#f7fbf7;"}
![Fonte: An√°lise de dados para a vigil√¢ncia em sa√∫de (ABRASCO)](tipos_variaveis.png)
:::

## Valores ausentes (*missing values*)

-   Valores ausentes s√£o denotados por *NA* ou *NaN*

-   *NaN* refere-se a opera√ß√µes matem√°ticas n√£o definidas

    -   um *NaN* √© tamb√©m um *NA*, mas o inverso n√£o √© verdadeiro

-   Podemos usar *is.na( )* para testar se um objeto √© *NA*

-   Podemos usar *is.nan( )* para testar se um objeto √© *NaN*

    ```{r, echo=TRUE}
    x <- c(1, 2, NA, 10, 3)

    is.na(x)

    is.nan(x)
    ```

## Quadro de dados (*data frames*) {.smaller}

S√£o utilizados para armazenar dados tabulares, tabelas

-   S√£o representados como um tipo especial de lista onde cada elemento da lista possui o mesmo comprimento

-   Cada elemento da lista √© como uma **vari√°vel**, e o comprimento de cada lista o *n√∫mero de linhas*

-   Possuem um atributo especial: *row.names*

-   Geralmente s√£o criados chamando *read.table()* ou *read.csv()*

------------------------------------------------------------------------

Tamb√©m podemos cri√°-los com a fun√ß√£o *data.frame( )*:

```{r, echo=TRUE}
x <- data.frame(paciente = 1:4, retorno = c(T, T, F, F)) 

x

nrow(x)

ncol(x)
```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Data Frames
:::

## *Subsetting*

-   Refere-se √† opera√ß√£o de extrair subconjuntos dos objetos do R

-   Existem formas diferentes, dependendo do tipo de objeto

------------------------------------------------------------------------

### Vetores

-   Utilizamos \[ \]
-   Retorna um subconjunto cujo elemento √© da mesma classe do original
-   Pode ser utilizado para selecionar mais de um elemento

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Subsetting
:::

------------------------------------------------------------------------

[*Pr√°tica*]{.azul}

``` r
 x <- c("a", "b", "c", "c", "d", "a")
 x[1]
 
 x[2]

x[1:4]

x[x > "a"]
```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Vetores
:::

### Matrizes

-   Utilizamos\[ \]

-   Consideramos os √≠ndices *i* (linhas) e *j* (colunas): *(i,j)*

    ```{r, echo = TRUE}
    x <- matrix(1:6, 2, 3)
    x[1,2]
    x[2,1]
    ```

-   Podemos selecionar apenas linhas ou colunas

    ```{r, echo=TRUE}
    x[1,]
    x[, 2]
    ```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Subsetting
:::

### Listas

Podemos utilizar \[ \], \[ \[ \] \] ou \$

<br>

```{r, echo = TRUE}

x <- list(Hosp = 1:4, UBS = 2)

x[1]

x[[1]]

x$UBS

x[["UBS"]]

```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Subsetting
:::

### Data frames

``` r

pacientes <- data.frame(
  id = c(101, 102, 103, 104),
  nome = c("Ana", "Carlos", "Beatriz", "Daniel"),
  idade = c(35, 42, 29, 50),
  hipertensao = c(TRUE, TRUE, FALSE, TRUE),
  glicemia = c(92, 110, 85, 130)
)

# Selecionar a primeira linha, segunda coluna (nome do primeiro paciente)
pacientes[1, 2]    # "Ana"

# Selecionar as duas primeiras linhas, todas as colunas
pacientes[1:2, ]

# Selecionar todas as idades
pacientes[, "idade"]

# Selecionar pacientes com glicemia maior que 100 (potencial risco de diabetes)
pacientes[pacientes$glicemia > 100, ]

# Selecionar pacientes com hipertens√£o
pacientes[pacientes$hipertensao == TRUE, ]
```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Subsetting
:::

## Estruturas de controle

-   S√£o mais √∫teis para escrever **programas** (*scripts*)

-   Permitem controlar o fluxo de execu√ß√£o do *script*

-   Na linha de comando, as fun√ß√µes *apply* s√£o mais √∫teis

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Estruturas de controle
:::

------------------------------------------------------------------------

Estruturas de controle:

-   if, else

-   for

-   while

-   repeat

-   break

-   next

-   return

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Estruturas de controle
:::

------------------------------------------------------------------------

-   If, else: testam um condi√ß√£o

    ``` r
     if(<condi√ß√£o>) {
            ## faz algo
     } else {
            ## faz outra coisa
     }
    ```

-   

    ``` r
    if(x > 3) {
            y <- 10
     } else {
            y <- 0
     }
    ```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Estruturas de controle
:::

------------------------------------------------------------------------

-   for: executa um *loop* uma quantidade fixa de vezes\
    [*Pr√°tica*]{.azul}

    ``` r
    for(i in 1:10) {
            print(i)
     }
    ```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Estruturas de controle
:::

------------------------------------------------------------------------

-   while: executa um *loop* enquanto uma condi√ß√£o for verdade

    ``` r

    conte <- 0
     while(conte < 10) {
            print(conte)
            conte <- conte + 1
     }
    ```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Estruturas de controle
:::

------------------------------------------------------------------------

-   repeat: executa um *loop* infinito

-   break: termina a execu√ß√£o de um *loop*

    ``` r
     x0 <- 1
     tol <- 1e-8
     repeat {
            x1 <- computeEstimate()
            if(abs(x1 - x0) < tol) {
                    break
            } else {
                    x0 <- x1
            } 
    }
    ```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Estruturas de controle
:::

------------------------------------------------------------------------

::: {.callout-note style="background-color:#dceeff;"}
1e-8 refere-se a *nota√ß√£o cient√≠fica*\
1e-8 = 1 x 10\^(-8) = 0,00000008

abs( ) √© a fun√ß√£o que calcula o m√≥tulo, ou valor absoluto
:::

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Estruturas de controle
:::

------------------------------------------------------------------------

-   next: pula intera√ß√µes de um *loop*

    ``` r

     for(i in 1:100) {
     if(i <= 20) {
     ## Pula as primeiras 20 itera√ß√µes
     next 
            }
     ## Faz algo aqui...
     }
    ```

<!-- -->

-   return: termina a execu√ß√£o de uma fun√ß√£o

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Estruturas de controle
:::

------------------------------------------------------------------------

::: {.callout-tip style="background-color:#e6ffe6;"}
Sempre que usar estruturas de controle, fique atento aos { }, que iniciam e fecham seu conte√∫do.
:::

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Estruturas de controle
:::

## Fun√ß√µes

-   S√£o mais um tipo de objeto

    -   No lugar de valores, cont√©m c√≥digo

    -   O c√≥digo √© armazenado em um formato que permite seu uso facilmente, em novas situa√ß√µes

-   S√£o constru√≠das estabelecendo-se seus **argumentos**

-   A fun√ß√£o *arg( )* permite ver os argumentos de uma fun√ß√£o [*Pr√°tica*]{.azul}

    ```{r, echo = TRUE, eval = FALSE}
    # Observando os argumentos de uma fun√ß√£o

    args(round)
    ```

------------------------------------------------------------------------

-   Entramos com os argumentos de uma fun√ß√£o na ordem em que foram criados

-   Geralmente os dois primeiros argumentos de uma fun√ß√£o s√£o conhecidos, ent√£o podemos omiti-los

    ```{r, echo=TRUE, eval=FALSE}

    round(x = 1.141598, digits = 2) # argumentos expl√≠citos

    round(1.141598,2) # argumentos impl√≠citos
    ```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Fun√ß√µes
:::

------------------------------------------------------------------------

::: {.callout-tip style="background-color:#e6ffe6;"}
Boa pr√°tica: escrever os nomes dos argumentos a partir do 3¬∫.
:::

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Fun√ß√µes
:::

### Escrevendo suas pr√≥prias fun√ß√µes

-   Passamos de 'morador' para 'arquiteto'
-   Uma fun√ß√£o tem tr√™s componentes b√°sicos

1)  nome
2)  corpo de c√≥digo
3)  conjunto de argumentos

------------------------------------------------------------------------

Utilizamos a fun√ß√£o *function( )*

```{r, echo=TRUE, eval=TRUE}

# Pr√°tica

# Exemplo de fun√ß√£o criada pelo usu√°rio:

joga_dados <- function() {
  dado <- 1:6
  dados <- sample(dado, size = 2, replace = TRUE)
  sum(dados)
}

# Para chamarmos a fun√ß√£o, utilizamos o nome atribu√≠do a ela:

joga_dados() 

# Quando acionamos a fun√ß√£o, o R executa o c√≥digo e retorna o
# resultado da √∫ltima linha de c√≥digo

```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Escrevendo fun√ß√µes
:::

------------------------------------------------------------------------

::: {.callout-tip style="background-color:#e6ffe6;"}
Com o cursos no console, utilize 'seta para cima', para buscar os comandos executados anteriormente.
:::

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Escrevendo fun√ß√µes
:::

------------------------------------------------------------------------

Podemos utilizar argumentos que ainda n√£o tenham sido definidos.\
Neste caso, eles precisam ter valores atribu√≠dos quando chamamos a fun√ß√£o.

```{r, echo=TRUE}

# Pr√°tica

joga_dados <- function(dado) {
  dados <- sample(dado, size = 2, replace = TRUE)
  sum(dados)
}

joga_dados(dado = 1:4)

```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Escrevendo fun√ß√µes
:::

------------------------------------------------------------------------

Podemos atribuir valores iniciais ao argumento:

```{r, echo=TRUE, eval=FALSE}

# Pr√°tica

joga_dados <- function(dado = 1:6) {
  dados <- sample(dado, size = 2, replace = TRUE)
  sum(dados)
}

joga_dados()

joga_dados(dado = 1:12)

```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Escrevendo fun√ß√µes
:::

# 5. Lendo os dados [*Pr√°tica*]{.azul}

## Lendo os dados .csv

```{r, echo=TRUE, eval=FALSE}

if(!require(readr)) install.packages("readr")
library(readr)

dados <- read_csv2(file = "e_sus_notifica.csv")

```

## Lendo dados .dbf

```{r, echo=TRUE, eval=FALSE}

if(!require(foreign)) install.packages("foreign")
library(foreign)

dados_sinan <- read.dbf(file = 'NINDINET.dbf', as.is = TRUE)

head(dados_sinan)

```

## Lendo dados .xlsx

```{r, echo=TRUE, eval=FALSE}

if(!require(readxl)) install.packages("readxl")
library(readxl)

dados_sivep <- read_excel("sivep_gripe.xlsx",
                          sheet = "SIVEPGRIPE",
                          skip = 0)

```

# 6. Manipulando dados

------------------------------------------------------------------------

-   √â parte da pesquisa quantitativa que toma mais tempo
-   Tamb√©m √© onde acontece a maior parte dos erros
-   Quais os problemas de se fazer isso em planilhas eletr√¥nicas? ü§î

------------------------------------------------------------------------

::: {.callout-tip style="background-color:#e6ffe6;"}
Boa pr√°tica: indicar todos os pacotes que ser√£o utilizados no come√ßo do script.
:::

```{r, echo=TRUE, eval=TRUE}

if(!require(foreign)) install.packages("foreign");library(foreign) 
if(!require(readxl)) install.packages("readxl");library(readxl)
if(!require(readr)) install.packages("readr");library(readr)
if(!require(janitor)) install.packages("janitor");library(janitor)
if(!require(skimr)) install.packages("skimr");library(skimr)
if(!require(stringr)) install.packages("stringr");library(stringr)
if(!require(stringi)) install.packages("stringi");library(stringi)
if(!require(lubridate)) install.packages("lubridate");library(lubridate)
```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Manipulando dados
:::

------------------------------------------------------------------------

::: {.callout-tip style="background-color:#e6ffe6;"}
<br> Organize os dados do seu projeto dentro de uma pasta separada, p.e., "Dados"
:::

------------------------------------------------------------------------

```{r, echo = TRUE, eval = FALSE}
# Importando o arquivo {`NINDINET.dbf`} no objeto {`base`}

base <- read.dbf(file = 'Dados/NINDINET.dbf', as.is = TRUE)
```

O argumento **as.is**:

-   Evita que texto sejam transformadas em fatores de imediato

-   Isso torna a manipula√ß√£o mais flex√≠vel (ex.: limpeza de dados, padroniza√ß√£o de strings, etc)

-   Fotores consomem mais mem√≥ria. Relevante em arquivos grandes

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Manipulando dados
:::

------------------------------------------------------------------------

::: {.callout-tip style="background-color:#e6ffe6;"}
<br> Use 'Ctrl' + F para buscar dentro do seu documento R.

Use 'Replace' para substituir palavras.\
Muito √∫til quando queremos alterar o comporamento de diversas chunks ao mesmo tempo.
:::

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Manipulando dados
:::

## Visualiza√ß√£o inicial dos dados

```{r, echo=TRUE, eval=FALSE}

head(base)

library(tidyverse)
glimpse(base)

```

::: {.callout-tip style="background-color:#e6ffe6;"}
<br> Execute o c√≥digo da chunk com o 'play', no canto superior direito.

Se uma chunk de c√≥digo possui diversas sa√≠das (visualiza√ß√µes), clique nos quadros do rstudio abaixo da chunk para visualizar todas as sa√≠das.
:::

## Selecionando vari√°veis (colunas)

```{r, echo=TRUE, eval=FALSE}

base_menor <- select(base, DT_NOTIFIC, DT_NASC, CS_SEXO, CS_RACA, ID_MN_RESI,
                     ID_AGRAVO)

```

## Piping

O R nos permite utilizar *piping* (encadeamento) para ligar fun√ß√µes.

```{r, echo=TRUE, eval=FALSE}

base_menor <- base |>
  select(DT_NOTIFIC, DT_NASC, CS_SEXO, CS_RACA, ID_MN_RESI, ID_AGRAVO)

```

-   O primeiro argumento da fun√ß√£o √© passado de antem√£o
-   Operador de 'pipe' antigo: %\>%
-   Operador do tidyverse: \|\>

------------------------------------------------------------------------

Incluindo mais uma fun√ß√£o no pipe

```{r, echo=TRUE, eval=FALSE}

base |>
  select(DT_NOTIFIC, DT_NASC, CS_SEXO, CS_RACA, ID_MN_RESI, ID_AGRAVO) |>
  head()

```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Piping
:::

## Excluindo colunas

```{r, echo = TRUE, eval = FALSE}

base_menor |>
  select(-DT_NASC) |> 
  head()

```

## Criando colunas

```{r, echo = TRUE, eval = FALSE}

# Criando uma nova vari√°vel, tempo de digita√ß√£o:
base_menor_2 <- base |>
select(NU_NOTIFIC, ID_AGRAVO, DT_NOTIFIC, DT_DIGITA) |>
  mutate(TEMPO_DIGITA = DT_DIGITA - DT_NOTIFIC)

# Visualizando a var DT_DIGITA como num√©rica
base_menor_2 |>
  mutate(TEMPO_DIGITA = as.numeric(TEMPO_DIGITA)) |>
  head()

```

## Limpando caracteres e padronizando as colunas

```{r, echo = TRUE, eval = FALSE}

# Importando o banco de dados { `CID-10-CATEGORIAS.CSV } para o `R`
cid10_categorias <- read_csv2('Dados/CID-10-CATEGORIAS.CSV')

# Utilizando a fun√ß√£o `colnames()` para checar as vari√°veis 
colnames(cid10_categorias)

# Utilizando a fun√ß√£o `clean_names()` (janitor) para editar o nome das vari√°veis
cid10_categorias_nova <- clean_names(cid10_categorias)

# Visualizando as vari√°veis ap√≥s a transforma√ß√£o
colnames(cid10_categorias_nova)

```

------------------------------------------------------------------------

::: {.callout-tip style="background-color:#e6ffe6;"}
Utilize *'pacote :: fun√ßao'* para especificar de qual pacote vem a fun√ß√£o.

Muito √∫til quando uma fun√ß√£o existe em pacotes diferentes.
:::

```{r, echo = TRUE, eval = FALSE}
# Utilizando a fun√ß√£o `clean_names()` (janitor) para editar o nome das vari√°veis
cid10_categorias_nova <- janitor::clean_names(cid10_categorias)
```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Limpando caracteres e padronizando as colunas
:::

## Filtrando colunas

```{r, echo = TRUE, eval = FALSE}

# Filtrando os CIDs igual a B19, da coluna "ID_AGRAVO"
# com tempo de digita√ß√£o maior que sete dias
base_menor_2 |>
  filter(ID_AGRAVO == "B19", TEMPO_DIGITA > 7) |>
  head()

# Filtrando os registros iguais a B19 OU A279 OU B54 na coluna "ID_AGRAVO"
base_menor_2 |>
  filter(ID_AGRAVO == "B19" | ID_AGRAVO == "A279" | ID_AGRAVO == "B54") |>
  head(20)

# Fazendo o mesmo filtro utilizando o operador `%in%`
base_menor_2 |>
  filter(ID_AGRAVO %in% c("B19", "A279", "B54")) |>
  head(20)

```

## Sumarizando colunas

```{r, echo = TRUE, eval = FALSE}

# Agrupando as notifica√ß√µes pelos agravos e contando a frequ√™ncia de notifica√ß√µes
base_menor_2 |>
  group_by(ID_AGRAVO) |>
  count(ID_AGRAVO) |>
  print(n = 20)

```

------------------------------------------------------------------------

```{r, echo = TRUE, eval = FALSE}

base_menor_2 |>
  
  # Agrupando as notifica√ß√µes pelos agravos
  group_by(ID_AGRAVO) |>
  
  # Utilizando a fun√ß√£o `summarise()` para criar novas colunas de s√≠ntese
  summarise(
    
    # Criando uma coluna de total, utilizando a fun√ß√£o `n()`
    total_agravos = n(),
    
    # Criando uma coluna de m√©dia, utilizando a fun√ß√£o `mean()`
    media_digita = mean(TEMPO_DIGITA)
  )

```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Sumarizando colunas
:::

## Modificando a ordem das colunas

```{r, echo = TRUE, eval = FALSE}

base_menor_2 |>
  
  # Agrupando as notifica√ß√µes pelos agravos
  group_by(ID_AGRAVO) |>
  
  # Utilizando a fun√ß√£o `summarise()` para criar novas colunas de s√≠ntese
  summarise(total_agravos = n(),
            media_digita = mean(TEMPO_DIGITA)) |>
  
  # Ordenando a tabela pela ordem decrescente da m√©dia de tempo de digita√ß√£o
  arrange(desc(media_digita))

```

## Avaliando a completude dos dados

```{r, echo = TRUE, eval = FALSE}

base |>
  
  # Utilizando a fun√ß√£o `summarise()` para criar novas colunas de s√≠ntese
  summarise(
    
    # Criando uma coluna com a soma de todos os registros da vari√°vel ra√ßa/cor devidamente preenchidos
    total_completo = sum(!is.na(CS_RACA)),
    
    # Criando uma coluna com o total de registros na tabela
    total_registros = n(),
    
    # Criando uma coluna com a soma de registros com a vari√°vel ra√ßa/cor em branco
    total_missing_raca = sum(is.na(CS_RACA)),
    
    # Criando uma coluna de porcentagem de completude (preenchimento)
    taxa_completude = (total_completo / total_registros) * 100
  )

```

::: {.callout-note style="background-color:#dceeff;"}
Em programa√ß√£o, "!" √© utilizado para negar uma express√£o l√≥gica.
:::

## Renomeando valores

```{r, echo = TRUE, eval = FALSE}

base |>
  
  # Contabilizando o n√∫mero de registros conforme as categorias de preenchimento
  # da vari√°vel "CS_RACA"
  count(CS_RACA)

base |>
  
  # Transformando os valores em branco em 9 na coluna "CS_RACA"
  mutate(CS_RACA = replace_na(CS_RACA, replace = 9)) |>
  
  # Contabilizando o n√∫mero de registros conforme as categorias de preenchimento
  # da vari√°vel "CS_RACA"
  count(CS_RACA)

```

## Transformando os dados no formato largo em formato longo

---

![Fonte: An√°lise de dados para vigil√¢ncia em sa√∫de (ABRASCO)](wide_long.png)

---

```{r, echo = TRUE, eval = FALSE}

# Importando o banco de dados { `cobertura_hepatiteb_rosas_2016_2020_A.csv } para o `R`
dados <- read_csv(file = "Dados/cobertura_hepatiteb_rosas_2016_2020_A.csv")

```

```{r, echo = TRUE, eval = FALSE}

# Criando o objeto {`dados_longos`}
dados_longos <- dados |>
  
  # Utilizando a fun√ß√£o `pivot_longer()` para transforma√ß√£o de colunas
  pivot_longer(
    
    # Definindo as colunas que ser√£o transformadas
    cols = c("Ano 2016", "Ano 2017", "Ano 2018", "Ano 2019", "Ano 2020"),
    
    # Definindo o nome da vari√°vel nova que receber√° os nomes acima
    names_to = "Ano",
    
    # Definindo o nome da vari√°vel nova que receber√° os valores da tabela
    values_to = "Cobertura Vacinal contra Hepatite B",
    
    # Retirando a palavra "Ano " antes de cada valor da vari√°vel Ano
    # Tamb√©m estamos retirando o espa√ßo depois da palavra "Ano"
    names_prefix = "Ano "
  )
# Visualizando a tabela {`dados_longos`} no formato longo
dados_longos

```

## Transformando os dados do formato longo em formato largo

```{r, echo = TRUE, eval = FALSE}

# Criando o objeto {`dados_largos`}
dados_largos <- dados_longos |>
  
  # Utilizando a fun√ß√£o `pivot_wider()` para transforma√ß√£o de colunas
  pivot_wider(
    
    # Definindo de qual vari√°vel estamos resgatando os nomes das colunas
    names_from = "Ano",
    
    # Definindo de qual vari√°vel estamos resgatando os valores das colunas
    values_from = "Cobertura Vacinal contra Hepatite B")

# visualizando a tabela
dados_largos

```

## Separarando o conte√∫do de uma vari√°vel em v√°rias colunas

```{r, echo = TRUE, eval = FALSE}

# Importando o banco de dados { `notificacao_eapv_2021m.xlsx` } para o `R`
eapv_2021m <- read_xlsx('Dados/notificacao_eapv_2021m.xlsx')

```

```{r, echo = TRUE, eval = FALSE}

# Visualizando a tabela {`eapv_2021m`} com a fun√ß√£o `View()
View(eapv_2021m)

# Selecionando e visualizando vari√°veis espec√≠ficas
eapv_2021m |>
  
  # Selecionando tr√™s colunas do data.frame {`eapv_2021m`}
  select(imunobiologico_vacina, dose, data_da_aplicacao) |>
  
  # Utilizando a fun√ß√£o `head()` para visualizar as primeiras linhas da tabela
  head()

```

------------------------------------------------------------------------

```{r, echo = TRUE, eval = FALSE}

eapv_2021m |>
  # Dividindo a coluna `imunobiologico_vacina` em tr√™s novas colunas
  separate(
    # Definindo a coluna que ser√° separada
    col = imunobiologico_vacina,
    # Definindo os nomes das novas colunas
    into = c("vac_event_1", "vac_event_2", "vac_event_3"),
    # Definindo qual o caractere que est√° sendo utilizado dentro das colunas
    sep = "\\|"
  ) |>
  # Selecionando as novas colunas para visualiza√ß√£o
  select("vac_event_1", "vac_event_2", "vac_event_3")

```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Separarando o conte√∫de uma vari√°vel em v√°rias colunas
:::

## Recodificando linhas e colunas

```{r, echo = TRUE, eval = FALSE}

base_menor |>
  # Renomeando os valores da vari√°vel CS_SEXO usando a fun√ß√£o `mutate()` e `case_when()`
  mutate(
    sexo_cat = case_when(
      CS_SEXO == "M" ~ "Masculino",
      CS_SEXO == "F" ~ "Feminino",
      CS_SEXO == "I" | is.na(CS_SEXO) ~ "Ignorado",
      TRUE ~ NA_character_
    )
  ) |>
  # Visualizando a tabela {`base_menor`} recodificada
  head()

```

------------------------------------------------------------------------

```{r, echo = TRUE, eval = FALSE}
base_menor <- base_menor |>
  mutate(
    raca_cor_cat = case_when(
      # Se o valor da coluna for igual a "1" transforme para "Branca"
      CS_RACA == "1" ~ "Branca",
      # Se o valor da coluna for igual a "2" transforme para "Preta"
      CS_RACA == "2" ~ "Preta",
      # Se o valor da coluna for igual a "3" transforme para "Amarela"
      CS_RACA == "3" ~ "Amarela",
      # Se o valor da coluna for igual a "4" transforme para "Parda"
      CS_RACA == "4" ~ "Parda",
      CS_RACA == "5" ~ "Ind√≠gena",
      CS_RACA == "9" | is.na(CS_RACA) ~ "Ignorado",
      TRUE ~ NA_character_
    )
  ) |>
  head()
```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Recodificando linhas e colunas
:::

------------------------------------------------------------------------

```{r, echo = TRUE, eval = FALSE}

base |>
  # Utilizando a fun√ß√£o `mutate()` para criar colunas
  mutate(
    # Criando uma coluna de idade conforme a codifica√ß√£o da vari√°vel NU_IDADE_N
    idade_anos = if_else(str_sub(NU_IDADE_N, 1, 1) == "4", 
                         as.numeric(str_sub(NU_IDADE_N, 2, 4)), 0),
    # Criando uma coluna de faixa et√°ria a partir da vari√°vel idade dos casos notificados
    # utilizando a fun√ß√£o `cut()`
    fx_etaria = cut(
      # Definindo qual vari√°vel ser√° classificada em faixas
      x = idade_anos,
      # Definindo os pontos de corte das classes
      breaks = c(0, 10, 20, 60, Inf),
      # Definindo os r√≥tulos das classes
      # Definindo o tipo do ponto de corte
      right = FALSE
    )
  ) |>
  select(NU_IDADE_N,idade_anos,fx_etaria,everything()) # Muda ordem de visualiza√ß√£o

```

::: {style="position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center; opacity: 0.3; font-size: 1.2em;"}
Recodificando linhas e colunas
:::

---

::: {.callout-tip style="background-color:#e6ffe6;"}
<br>
Coment√°rios do meio da linha podem ser √∫teis, mas podem dificultar a visualiza√ß√£o
do c√≥digo.
:::

```{r, echo = TRUE, eval = FALSE}

base |>
  mutate(
    idade_anos = if_else(str_sub(NU_IDADE_N, 1, 1) == "4", 
                         as.numeric(str_sub(NU_IDADE_N, 2, 4)), 0),
    fx_etaria = cut(
      x = idade_anos,
      breaks = c(0, 10, 20, 60, Inf),
      right = FALSE
    )
  ) |>
  select(NU_IDADE_N,idade_anos,fx_etaria,everything())

```
